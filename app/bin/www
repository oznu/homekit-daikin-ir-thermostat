#!/usr/bin/env node

'use strict'

const hap = require('../lib/hap')
const app = require('../lib/api/express')
const http = require('http')
const server = http.createServer(app)

const port = process.env.PORT || '3003'

/**
 * Event listener for HTTP server "error" event.
 */
function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening () {
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  console.log('Listening on ' + bind + ' with PID ' + process.pid)
}

// Start HAP
hap.start()

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

process.on('SIGINT', () => {
  process.exit()
})
